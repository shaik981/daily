method -1
int isPalindrome(string S,int start,int end){
    int i=start,j=end;
    while(i<j){
        if(S[i++]!=S[j--]) return 0;
    }
    return 1;
}
public:
string longestPalin (string S) {
    // code here
    int n = S.size();
    int maxLen = 0;
    string ans;
    for(int i=0;i<n;i++){
        string sub;
        for(int j=i;j<n;j++){
            sub.push_back(S[j]);
            if(isPalindrome(sub,0,sub.size()-1)){
                if(sub.size()>maxLen){
                    ans = sub;
                    maxLen = j-i+1;
                }
            }
        }
    }
    return ans;
}

TC - O(n^3);
SC - O(1);


method -2
string longestPalin (string S) {
    // code here
    int n = S.size();
    int maxLen = 0;
    string ans;
    vector<vector<int>> dp(n,vector<int>(n,0));
    for(int diff=0;diff<n;diff++){
        for(int i=0,j=i+diff;j<n;i++,j++){
            if(i==j) dp[i][j] = 1;
            else if(diff == 1){
                dp[i][j] = S[i]==S[j] ? 2:0;
            }
            else{
                if(S[i]==S[j] && dp[i+1][j-1]){
                    dp[i][j] = dp[i+1][j-1]+2;
                }
            }
            if(dp[i][j]){
                if(j-i+1>maxLen){
                    maxLen = j-i+1;
                    ans = S.substr(i,maxLen);
                }
            }
        }
    }
    return ans;
}

TC - O(n^2);
SC - O(n^2);

method -3
string longestPalin (string S) {
    // code here
    int n = S.size();
    string ans;
    int start = 0,maxLen = 1;
    int l,h;
    for(int i=1;i<n;i++){
        // even substring
        l=i-1;
        h=i;
        while(l>=0 && h<n && S[l]==S[h]){
            if(h-l+1>maxLen){
                start = l;
                maxLen = h-l+1;
            }
            l--;
            h++;
        }
        
        l=i-1;
        h=i+1;
        while(i>=0 && h<n && S[l]==S[h]){
            if(h-l+1>maxLen){
                start = l;
                maxLen = h-l+1;
            }
            l--;
            h++;
        }
    }
    ans = S.substr(start,maxLen);
    return ans;
}

TC - O(n^2);
SC - O(1);