method -1
int maxProfit(vector<int>& prices) {
    int ans = 0,n=prices.size();
    for(int i=0;i<n;i++){
        for(int j=i+1;j<n;j++){
            ans=max(ans,prices[j]-prices[i]);
        }
    }
    return ans;
}

TC - O(n^2);
SC - O(1);

method -2
int maxProfit(vector<int>& prices) {
    int ans = 0,n=prices.size();
    vector<int> suffix(n);
    suffix[n-1]=prices[n-1];
    for(int i=n-2;i>=0;i--) suffix[i]=max(prices[i],suffix[i+1]);
    for(int i=0;i<n-1;i++){
        ans = max(ans,suffix[i+1]-prices[i]);
    }
    return ans;
}

TC - O(n);
SC - O(n);

method -3
int maxProfit(vector<int>& prices) {
    int ans = 0,n=prices.size();
    int maxTill = prices[n-1];
    for(int i=n-2;i>=0;i--){
        ans = max(ans,maxTill-prices[i]);
        maxTill = max(maxTill,prices[i]);
    }
    return ans;
}

TC - O(n);
SC - O(1);