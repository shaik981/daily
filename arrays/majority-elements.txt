Majority Element 1
method -1
int majorityElement(vector<int>& nums) {
    sort(nums.begin(),nums.end());
    int ans = -1;
    int temp = 1,n=nums.size();
    for(int i=0;i<n;i++){
        if(i+1<n && nums[i]==nums[i+1]){
            temp++;
        }else{
            if(temp>n/2) ans = nums[i];
            temp=1;
        }
    }
    return ans;
}

TC - O(nlogn);
SC - O(1);

method -2
int majorityElement(vector<int>& nums) {
    unordered_map<int,int> um;
    int n = nums.size();
    for(auto x: nums){
        um[x]++;
    }
    for(auto x: um){
        if(x.second>n/2) return x.first;
    }
    return -1;
}

TC - O(n);
SC - O(n);

method -3
int majorityElement(vector<int>& nums) {
    int majority = INT_MIN, count = 0;
    for(int i = 0; i < nums.size(); i++){
        if(majority == nums[i]){
            count++;
        }
        else if(count == 0){
            majority = nums[i];
            count=1;
        }
        else count--;
    }
    return majority;
}

TC - O(n);
SC - O(1);


Majority Element 2
method -1
vector<int> majorityElement(vector<int>& nums) {
    sort(nums.begin(),nums.end());
    vector<int> ans;
    int temp = 1,n=nums.size();
    for(int i=0;i<n;i++){
        if(i+1<n && nums[i]==nums[i+1]){
            temp++;
        }else{
            if(temp>n/3) ans.push_back(nums[i]);
            temp=1;
        }
    }
    return ans;
}

TC - O(nlogn);
SC - O(1);

method -2
vector<int> majorityElement(vector<int>& nums) {
    unordered_map<int,int> um;
    int n = nums.size();
    for(auto x: nums){
        um[x]++;
    }
    vector<int> ans;
    for(auto x: um){
        if(x.second>n/3) ans.push_back(x.first);
    }
    return ans;
}

TC - O(n);
SC - O(n);

method -3
vector<int> majorityElement(vector<int>& nums) {
    int majority1 = INT_MIN, count1 = 0;
    int majority2 = INT_MIN, count2 = 0;
    int n = nums.size();
    for(int i = 0; i < n; i++){
        if(nums[i] == majority1){
            count1++;
        }
        else if(nums[i] == majority2){
            count2++;
        }
        else if(count1 == 0){
            majority1 = nums[i];
            count1=1;
        }
        else if(count2 == 0){
            majority2 = nums[i];
            count2=1;
        }
        else{
            count1--;
            count2--;
        }
    }
    count1=0;count2=0;
    for(int i=0;i<n;i++){
        if(nums[i]==majority1) count1++;
        if(nums[i]==majority2) count2++;
    }
    vector<int> ans;
    if(count1>n/3) ans.push_back(majority1);
    if(count2>n/3) ans.push_back(majority2);
    return ans;
}

TC - O(n);
SC - O(1);