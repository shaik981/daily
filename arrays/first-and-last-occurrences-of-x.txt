method -1
vector<int> find(int arr[], int n , int x ){
    // code here
    vector<int> ans;
    int i=0;
    while(i<n){
        if(arr[i]==x) break;
        i++;
    }
    if(i==n) return {-1,-1};
    ans.push_back(i);
    while(i<n && arr[i]==arr[i+1]){
        i++;
    }
    if(i==n){
        ans.push_back(i-1);
        return ans;
    }
    ans.push_back(i);
    return ans;
}

TC - O(n);
SC - O(1);

method -2
vector<int> find(int arr[], int n , int x ){
    // code here
    int i=0,j=n-1,k=-1;
    while(i<=j){
        int mid = i+(j-i)/2;
        if(arr[mid]==x){
            k=mid;
            break;
        }else if(arr[mid]<x) i=mid+1;
        else j=mid-1;
    }
    if(k==-1) return {-1,-1};
    int l=k;
    i=0,j=k;
    while(i<=j){
        int mid = i+(j-i)/2;
        if(arr[mid]==x){
            l=mid;
            j=mid-1;
        }else if(arr[mid]<x) i=mid+1;
    }
    int r=k;
    i=k,j=n-1;
    while(i<=j){
        int mid = i+(j-i)/2;
        if(arr[mid]==x){
            r=mid;
            i=mid+1;
        }
        else if(arr[mid]>x) j=mid-1;
    }
    return {l,r};
}

TC - O(logn);
SC - O(1);