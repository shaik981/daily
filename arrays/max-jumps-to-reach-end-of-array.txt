method -1: Recursion
int solve(int arr[],int n,int idx){
    if(idx>=n-1) return 0;
    int ans = 1e8;
    for(int i=0;i<arr[idx];i++){
        int temp = 1+solve(arr,n,idx+i+1);
        ans = min(temp,ans);
    }
    return ans;
}
int minJumps(int arr[], int n){
    // Your code here
    int ans = solve(arr,n,0);
    if(ans >= 1e8) return -1;
    return ans;
}

method -2: Memoization
long long solve(int arr[],int n,int idx,vector<int>& dp){
    if(idx>=n-1) return 0;
    if(dp[idx]!=-1) return dp[idx];
    long long ans = 1e6;
    for(int i=0;i<arr[idx];i++){
        long long temp = 1+solve(arr,n,idx+i+1,dp);
        ans = min(temp,ans);
    }
    return dp[idx] = ans;
}
int minJumps(int arr[], int n){
    // Your code here
    vector<int> dp(n+1,-1);
    long long ans = solve(arr,n,0,dp);
    if(ans >= 1e6) return -1;
    return ans;
}

method -3
int minJumps(int arr[], int n){
    // Your code here
    if(n<=1) return 0;
    if(arr[0]==0) return -1;
    int maxR = arr[0],steps = arr[0], jumps = 1;
    for(int i=1;i<n;i++){
        if(i==n-1) return jumps;
        maxR = max(maxR,i+arr[i]);
        steps--;
        if(steps == 0){
            jumps++;
            if(i>=maxR) return -1;
            steps = maxR - i;
        }
    }
    return -1;
}

TC - O(n);
SC - O(1);