method -1
void merge(long long arr1[], long long arr2[], int n, int m) { 
    vector<int> res;
    for(int i=0;i<n;i++){
        res.push_back(arr1[i]);
    }
    for(int i=0;i<m;i++){
        res.push_back(arr2[i]);
    }
    sort(res.begin(),res.end());
    for(int i=0;i<n+m;i++){
        if(i<n){
            arr1[i]=res[i];
        }else{
            arr2[i-n]=res[i];
        }
    }
    return;
}

TC - O((n+m)log(n+m));
SC - O(n+m);

method -2
void merge(long long arr1[], long long arr2[], int n, int m) { 
    vector<int> res(n+m);
    int i=0,j=0,k=0;
    while(i<n && j<m){
        if(arr1[i]<=arr2[j]){
            res[k++]=arr1[i++];
        }else{
            res[k++]=arr2[j++];
        }
    }
    while(i<n){
        res[k++]=arr1[i++];
    }
    while(j<m){
        res[k++]=arr2[j++];
    }
    for(int i=0;i<n+m;i++){
        if(i<n){
            arr1[i]=res[i];
        }else{
            arr2[i-n]=res[i];
        }
    }
    return;
}

TC - O(n+m);
SC - O(n+m);

method -3
void merge(long long arr1[], long long arr2[], int n, int m) { 
    // code here 
    int i=n-1,j=0;
    while(i>=0 && j<m){
        if(arr1[i]>arr2[j]){
            swap(arr1[i],arr2[j]);
        }
        i--;
        j++;
    }
    sort(arr1,arr1+n);
    sort(arr2,arr2+m);
}

TC - O((n+m)log(n+m));
SC - O(1);