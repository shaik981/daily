method -1
long long int inversionCount(long long arr[], long long N)
{
    // Your Code Here
    long long int ans = 0;
    for(long long i=0;i<N;i++){
        for(long long j=i+1;j<N;j++){
            if(arr[i]>arr[j]) ans++;
        }
    }
    return ans;
}

TC - O(n^2);
SC - O(1);

method -2
void merge(long long arr[],long long l,long long m,long long r,long long &temp){
    long long n1 = m-l+1;
    long long n2 = r-m;
    long long left[n1],right[n2];
    for(long long i=0;i<n1;i++) left[i]=arr[l+i];
    for(long long i=0;i<n2;i++) right[i]=arr[m+i+1];
    long long i=0,j=0,k=l;
    while(i<n1 && j<n2){
        if(left[i]<=right[j]){
            arr[k]=left[i];
            i++;
        }else{
            temp+=n1-i;
            arr[k]=right[j];
            j++;
        }
        k++;
    }
    while(i<n1){
        arr[k++]=left[i++];
    }
    while(j<n2){
        arr[k++]=right[j++];
    }
}
void mergeSort(long long arr[], long long l,long long r,long long &temp){
    if(l<r){
        long long mid = (l+r)/2;
        mergeSort(arr,l,mid,temp);
        mergeSort(arr,mid+1,r,temp);
        merge(arr,l,mid,r,temp);
    }
}
long long int inversionCount(long long arr[], long long N)
{
    // Your Code Here
    long long temp = 0;
    mergeSort(arr,0,N-1,temp);
    return temp;
}

TC - O(nlogn);
SC - O(n);